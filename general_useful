seq(1,4,0.25)
# go from 1 to 4 by 0.25 units increment

rep(0.1,20)
# repeats 0.1 twenty times
# first state what you want to be repeated and then how many times
# create tis vector: 3 3 3 3 3 3 
# as below
rep(3,6)

sum(c(7,3,10))
# computes the sum of 7+3+10 that is 20 

sort(c(7,3,10,3,8))
# this is very useful to sort the numbers you have from lowest value to highest value  **************************

length(c(7,3,10,3,8))
# length tells us the number of elements we have in the vector, in this example we have 5 
# if we try to compute a statistic e.g. range or mean for a particular variable of a dataframe and we get an NA 
# we know we have data missing or empty so we need to exclude those from the command using the na.rm funciton as below:
e.g.
range(anaemia$bmi,na.rm=TRUE)

sapply(dataframe, class) - shows class of each column in the data frame


# using ifelse to code categories when we have missing values 

anaemia$sex2 <- ifelse(!is.na(anaemia$sex) & anaemia$sex=="Female",1,
                       ifelse(anaemia$sex=="male" | anaemia$sex=="Male",2,0)) 


summary(is.na(anaemia$los))
# Mode       FALSE 
# logical     580 


# Create a new dataframe from the dataframe you are using:

new_data <- old_data[ which(old_data$variable_needed=="Example" & old_data$variable2_needed > 65),]

# We can extend this using logical operators if needed e.g.

new_data <- old_data[ which(old_data$variable_needed=="Red" | old_data$variable_needed=="Blue" & old_data$variable2_needed > 65),]


# count number of observations of people who have hb post-op between >130 and <=150
sum(anaemia$hb_post>130 & anaemia$hb_post<=150,na.rm=TRUE) # answer is 7





