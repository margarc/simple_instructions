seq(1,4,0.25)
# go from 1 to 4 by 0.25 units increment

rep(0.1,20)
# repeats 0.1 twenty times
# first state what you want to be repeated and then how many times
# create tis vector: 3 3 3 3 3 3 
# as below
rep(3,6)

sum(c(7,3,10))
# computes the sum of 7+3+10 that is 20 

sort(c(7,3,10,3,8))
# this is very useful to sort the numbers you have from lowest value to highest value  *****

length(c(7,3,10,3,8))
# length tells us the number of elements we have in the vector, in this example we have 5 
# if we try to compute a statistic e.g. range or mean for a particular variable of a dataframe and we get an NA 
# we know we have data missing or empty so we need to exclude those from the command using the na.rm funciton as below:
e.g.
range(anaemia$bmi,na.rm=TRUE)

sapply(dataframe, class) - shows class of each column in the data frame


# using ifelse to code categories when we have missing values 

anaemia$sex2 <- ifelse(!is.na(anaemia$sex) & anaemia$sex=="Female",1,
                       ifelse(anaemia$sex=="male" | anaemia$sex=="Male",2,0)) 


summary(is.na(anaemia$los))
# Mode       FALSE 
# logical     580 


# Create a new dataframe from the dataframe you are using:
# Filter specific data:
new_data <- old_data[ which(old_data$variable_needed=="Example" & old_data$variable2_needed > 65),]

# We can extend this using logical operators if needed e.g.

new_data <- old_data[ which(old_data$variable_needed=="Red" | old_data$variable_needed=="Blue" & old_data$variable2_needed > 65),]

# Or another way (choosing the columns we need by name and creating new dataframe)
myvars_bre <- c("WCRF_Code", "Year", "ResultsNumber")
new_bre <- bre[myvars_bre]
dim(new_bre)


# count number of observations of people who have hb post-op between >130 and <=150
sum(anaemia$hb_post>130 & anaemia$hb_post<=150,na.rm=TRUE) # answer is 7


*See Below, an example of how to create a function that will enable us to compute more than one summary statistic and use it in aggregate()

# Calculate mean and SD of hb_pre by duration of post-op hospital stay (short or long). Then tabulate both in same table
# Create a function so that we can have both mean and sd together:

f1 <- function(x) c(Mean = mean(x), SD = sd(x))

x_pre <- aggregate(hb_pre ~ los_post, data=anaemia, f1); x_pre

x_post <- aggregate(hb_post ~ los_post, data=anaemia, f1); x_post

merge(x_pre, x_post)
new_table <- merge(x_pre, x_post); new_table
# check this again #

is.na(dataset$height) # to see if there are any NA values in the dataset

Note: when mean > median: +ve skewness
      when mean < median: -ve skewness
#----------------------------------------------------------------------------------------------------------------------------------#
Create new folder in an existing directory folder:
dir.create("plots")

#----------------------------------------------#
install.packages("epitools")
library(epitools)
#----------------------------------------------#
univariable_age<-glm(mort~age,family=binomial)

family argument = describes the error distribution and link function to be used in model

cbind(exp(coef(model_stratified)),exp(confint(model_stratified)))

# See  selected number of columns together 
View(new_all[c("c_site", "year")])

#----------------------------------------------For ggplot2------------------------------------------------------------#
#--- To modify y-axis scale (ggplot2)
scale_y_continuous(breaks=seq(0, 750, 50))
# and also for x-axis modify increment 
# example with year as Independent variable:
scale_x_continuous(breaks=seq(2004, 2017, 1))

#--------------------plot the graph, use facet-------------------------#
line <- ggplot(new_all, aes(year, papers, colour=c_site)) 

line + geom_smooth(method="loess") + 
 xlab("Year: 2006 to 2018") + 
 ylab("Number of papers") +
 theme_update(plot.title=element_text(hjust = 0.5)) + 
 ggtitle("Papers of all cancer sites in our database") +
 geom_path(aes(group=c_site)) + 
 geom_line(aes(color=c_site)) + 
 theme(legend.position="none", # to delete the legend 
       panel.grid=element_blank(),
       axis.text.x=element_blank()) + # to remove the text on x-axis (too packed otherwise & not clear bcz it repeats the year for every cancer site)
 scale_y_continuous(breaks=seq(0, 70, 10)) +
 scale_color_manual(values=custom.colors) +  # custom colors (those ones created)
 facet_wrap(~ c_site, scales="free")

*exclude year 2018, removing that row only and redo graph*

#--------------------------------simple BOXPLOT example----------------------------------#
boxplot(y~x,data=dataset_name, main="something_general", 
   xlab="something", ylab="something_else")
   
   
# Simple TABLE generation 
# Install sjPlot using for example tab_df()
# Also check: data.table-package

############FILTER AND USE GGPLOT######################
test1 <- sel_yrs %>%
 filter(Cancer %in% c("bladder cancer")) %>%
 ggplot(aes(x=Year, y=results)) +
 geom_line(linetype="solid",color="blue",size=1) + 
 geom_point() + 
 scale_y_continuous(breaks=seq(20, 600, 50)) +
 scale_x_continuous(breaks=seq(2005, 2019, 2)) + 
 theme_classic()


tidyverse
